{"version":3,"sources":["SearchBox.js","Card.js","CardList.js","Checkbox.js","CheckboxList.js","App.js","serviceWorker.js","index.js"],"names":["Input","styled","input","SearchBox","searchChange","type","placeholder","onChange","Container","div","ImageContainer","Image","img","Name","p","Card","image","name","src","CardList","list","map","l","P","Checkbox","tagName","checkedTags","onBoxClick","defaultChecked","onClick","CheckboxList","taglist","includes","AppContainer","SearchBoxContainer","CheckboxAndCardContainer","CheckboxContainer","CardContainer","App","useState","field","setField","tags","setTags","useEffect","console","log","Array","from","Set","listItem","flat","reduce","sum","value","sort","filteredCards","filter","info","some","tag","length","event","target","t","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.45edd7cb.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components/macro';\n\nconst SearchBox = ({searchChange}) => {\n    \n    return(\n    <div>\n        <Input \n            type='search' \n            placeholder='search image' \n            onChange={searchChange}\n        />\n    </div>\n    );\n};\n\nconst Input = styled.input`\n    border: black;\n    height: 30px;\n    width: 160px;\n    font-size: 20px;\n    color: #191919;\n`;\nexport default SearchBox;","import React from 'react';\nimport styled from 'styled-components/macro';\n\n\nconst Card = ({image, name}) => {\n    return(\n        <Container>\n            <ImageContainer>\n                <Image src= {image}/>\n            </ImageContainer>\n\n            <Name>{name}</Name>\n        </Container>\n    )\n}\n\nconst Container = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    flex-wrap: wrap;\n    width: 400px; \n    height: 200px;\n    margin: 5px;\n    border: 1px solid gray;\n    \n`\n\nconst ImageContainer = styled.div`\n    flex: 1;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 151px;\n    width: 380px;\n`;\nconst Image = styled.img`\n    display: flex;\n    max-width: 100%;\n    max-height: 100%;\n\n`\nconst Name = styled.p`\n    text-align: center;    \n    margin: 0px;\n    font-weight: bold;\n    font-size: 25px;\n    color: #C2C2C2;\n`\nexport default Card;","import React from 'react';\nimport Card from './Card.js';\nimport styled from 'styled-components/macro';\n\n\nconst CardList = ( {list} ) => {\n        return (\n            <Container>\n                {\n                    list.map((l) => {\n                    return (\n                        <Card \n                            image={l.image} \n                            name={l.name} \n                            />\n                    );\n                })\n            }\n       </Container>\n    );\n};\n\nconst Container = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    flex-direction: row;\n    justify-content: space-around;\n    margin-left: 190px;\n`;\n\nexport default CardList;","import React from 'react';\nimport styled from 'styled-components/macro';\n\nconst Checkbox = ({tagName, checkedTags, onBoxClick}) => {\n    \n    \n    return(\n        <Container>\n            <Input type=\"checkbox\" defaultChecked={checkedTags} onClick={() => onBoxClick(tagName)}></Input>\n            <P>{tagName}</P>\n        </Container>\n    );\n};\n\nconst Container = styled.div`\n    display: flex;\n    flex-direction: row;\n    padding-bottom: 15px;\n    align items: center;\n`;\nconst Input = styled.input `\n`;\n\nconst P = styled.p`\n    margin: 0px;\n    color: #C2C2C2;\n    font-size: 20px;\n    margin-left: 5px;\n`;\n\nexport default Checkbox;","import React from 'react';\nimport styled from 'styled-components/macro';\nimport Checkbox from './Checkbox';\n\nconst CheckboxList = ({taglist, checkedTags, onBoxClick}) => {\n    return(\n        <Container>\n                {\n                    taglist.map((l) => {\n                    return (\n                        <Checkbox \n                            tagName={l}\n                            checkedTags={checkedTags.includes(l)}\n                            onBoxClick={onBoxClick}\n                         />\n                    );\n                })\n            }\n        </Container>\n    );\n};\n\nconst Container = styled.div`\n\n`;\n\nexport default CheckboxList;","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport SearchBox from './SearchBox';\nimport list from './list';\nimport CardList from './CardList'\nimport styled from 'styled-components/macro';\nimport CheckboxList from './CheckboxList';\n\nfunction App() {\n  const [field, setField] = useState('');\n  const [tags, setTags] = useState([]);\n\n  useEffect(() => {\n    console.log(tags);\n  }, [tags])\n\n  const onCheck = (tag) => {\n    if (tags.includes(tag)) {\n      setTags(tags.filter(t => t !== tag))\n    } else {\n      setTags([...tags, tag])\n    }\n  };\n\n  const taglist = Array.from(new Set (list\n    .map((listItem) => [listItem.tags])\n    .flat()\n    .reduce((sum, value) => [...sum,...value] ,[])\n    .sort()\n    )\n  );\n\n  const onSearchChange = (event) => {\n      setField(event.target.value)\n  }; \n\n  const filteredCards = list.filter(info =>{\n    console.log(info.name, info.tags)\n      return info.name.includes(field) && (info.tags.some(tag => tags.includes(tag)) || tags.length === 0)\n  });\n  \n  return (\n    <AppContainer>\n        <SearchBoxContainer>\n          <SearchBox searchChange={onSearchChange}/>\n        </SearchBoxContainer>\n        <CheckboxAndCardContainer>\n          <CheckboxContainer>\n            <CheckboxList taglist={taglist} checkedTags={tags} onBoxClick={onCheck}/>\n          </CheckboxContainer>\n          <CardContainer>\n            <CardList list={filteredCards}/>\n          </CardContainer>\n        </CheckboxAndCardContainer>\n    </AppContainer>\n  );\n};\n\nconst AppContainer = styled.div `\n  background-color: #212121;\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n`;\n\nconst SearchBoxContainer = styled.div `\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 10px;\n`;\n\nconst CheckboxAndCardContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst CheckboxContainer = styled.div`\n  margin-left: 5px;\n  overflow: scroll;\n  height: 100vh;\n  position: fixed;\n  padding-right: 10px;\n`;\n\nconst CardContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: row;\n  height: fit-content;\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}